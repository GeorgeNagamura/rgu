{"version":3,"sources":["components/Piece.js","components/Square.js","components/HoldArea.js","components/SafeArea.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Piece","props","style","backgroundColor","player","className","type","Square","background","t_select","id","onClick","tSelect","occupied","content","HoldArea","movePiece","children","SafeArea","Board","saferow","middlerow","rtypes","s","m","hnumlist","state","status","safe","Array","fill","yhouse","ghouse","rolled","target","source","turn","renderSafe","color","map","v","i","display","width","height","alignItems","justifyContent","renderHold","check_select","this_id","t_select_copy","target_copy","source_copy","console","log","row","substr","hnumber","length","parseInt","push","setState","includes","status_copy","r1_copy","rm_copy","r2_copy","yhouse_copy","ghouse_copy","src_row","src_num","slice","countPieces","count","r1","rm","r2","rollDice","arrayRemove","arr","value","filter","ele","locUpdate","dowhat","array","num","counts","rlist","this","index","key","numero","hnum","renderRow","bind","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86c9961b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//const id= props.id - color+num?\r\n//const type = props.type - color\r\n\r\nfunction Piece(props) {\r\n    const color = props.player === 2? \"green\": \"yellow\"\r\n    const style = {\r\n        backgroundColor: color\r\n    }\r\n    return (\r\n        <div className=\"piece\" type={props.player} style={style}>\r\n            \r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Piece\r\n","import React  from 'react'\r\nimport Piece from './Piece'\r\n\r\nfunction Square(props) {\r\n    \r\n    let t_selected = false \r\n\r\n    const handleClick = () => {\r\n\r\n        props.tSelect(props.id, props.occupied)\r\n        \r\n    }\r\n    \r\n    let bg_color = \"grey\"\r\n    let style = {\r\n        \r\n    }\r\n\r\n    \r\n    \r\n    t_selected = props.t_select[0] === props.id? true:false\r\n    bg_color = t_selected? \"blue\":\"grey\"\r\n    \r\n    style = {\r\n        background: bg_color\r\n    }\r\n    return (\r\n        \r\n        <div className={props.className} onClick={handleClick} style={style} >\r\n            {props.occupied === 0? props.content: <Piece player={props.occupied}/>}        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\n\r\nfunction HoldArea(props) {\r\n    \r\n    const handleClick = () => {\r\n\r\n        props.movePiece(props.id, props.occupied)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={props.className} onClick={handleClick}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HoldArea\r\n","import React from 'react'\r\n\r\nfunction SafeArea(props) {\r\n    return (\r\n        <div className={props.className}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SafeArea \r\n","import React, { Component } from 'react'\r\nimport Piece from './Piece'\r\nimport Square from './Square'\r\nimport HoldArea from './HoldArea'\r\nimport SafeArea from './SafeArea'\r\n\r\nexport class Board extends Component {\r\n    saferow = [\"flower\", \"tile\", \"tile\", \"tile\", \"start\", \"goal\", \"flower\", \"tile\"];\r\n    middlerow = [\"tile\", \"tile\", \"tile\", \"flower\", \"tile\", \"tile\", \"tile\", \"tile\"];\r\n    rtypes = [[this.saferow], [this.middlerow], [this.saferow]]\r\n    s = [4, 3, 2, 1, 0, 15, 14, 13]\r\n    m = [5, 6, 7, 8, 9, 10, 11, 12]\r\n    hnumlist = [[this.s], [this.m], [this.s]] \r\n\r\n    state = {\r\n        status: {\"r1\": [0, 0, 0, 0, 0, 0, 0, 0], \"rm\": [0, 0, 0, 0, 0, 0, 0, 0], \"r2\":[0, 0, 0, 0, 0, 0, 0, 0]},\r\n        safe: [Array(7).fill(0), Array(7).fill(0)],\r\n        yhouse: [1, 1, 1, 1, 1, 1, 1],\r\n        ghouse: [2, 2, 2, 2, 2, 2, 2],\r\n        rolled: 3,\r\n        t_select: [],\r\n        target: [],\r\n        source: [],\r\n        turn: \"2\",    \r\n    }\r\n\r\n    renderSafe = (color) => { \r\n        const safe = this.state.safe    \r\n        let s_index = null\r\n        color === \"ys\"? s_index = 0: s_index = 1\r\n        \r\n        return (\r\n            safe[s_index].map( (v, i) => {\r\n                return (!v===0? <div style={{   display: \"flex\",\r\n                                        width: \"75px\",\r\n                                        height: \"75px\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\"\r\n                                    }}><Piece id={color + 15} player={v}/></div>:\r\n                                    null\r\n                                    )\r\n            })\r\n        )\r\n    }\r\n\r\n    //render hold area (start)\r\n    renderHold = (color) => { \r\n        const yhouse = this.state.yhouse\r\n        const ghouse = this.state.ghouse\r\n        let house = null\r\n        let check_select = 9\r\n        let this_id = (color + 0)\r\n        \r\n        this.state.t_select[0] === this_id? check_select = 0: check_select=9\r\n        \r\n        color === \"yh\"? house = yhouse : house=ghouse\r\n        \r\n        return (\r\n            house.map( (v, i) => {\r\n                return (i !== check_select? <div style={{    display: \"flex\",\r\n                                        width: \"100px\",\r\n                                        height: \"100px\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\"\r\n                                    }}><Piece id={color + 0} player={v}/></div>:\r\n                                        <div style={{    display: \"flex\",\r\n                                        width: \"100px\",\r\n                                        height: \"100px\",\r\n                                        alignItems: \"left\",\r\n                                        justifyContent: \"center\",\r\n                                        backgroundColor: \"red\"\r\n                                    }}><Piece id={color + 0} player={v}/></div>)\r\n            })\r\n        )\r\n    }\r\n    \r\n    movePiece = (id, occupied) => {\r\n        let player = \"2\"\r\n        //se for o turno do jogador\r\n        let t_select_copy = [...this.state.t_select]\r\n        let target_copy = []\r\n        let source_copy = []\r\n        console.log(this.state.status[\"r1\"])\r\n        const yhouse = this.state.yhouse\r\n        const ghouse = this.state.ghouse\r\n        if (this.state.turn === player){\r\n            //checar se a casa está ocupada\r\n            let row = id.substr(0, 2)\r\n            let hnumber = id.substr(2)\r\n            console.log (\"turn 1\")\r\n            \r\n            //checar se há uma peça selecionada\r\n            if (this.state.t_select.length === 0){\r\n                console.log(occupied)\r\n                if (occupied === parseInt(player)){\r\n                    console.log(\"piece selected: \" + id)\r\n                    //se a peça não estiver selecionada e for o primeiro click\r\n                    if (this.state.t_select.length === 0) {\r\n                        //selecionar peça\r\n                        t_select_copy.push(id)\r\n                        source_copy.push(id)\r\n                        this.setState({\r\n                        t_select: [...t_select_copy],\r\n                        source: [...source_copy]        \r\n                        })\r\n                        console.log(\"adding: \" + this.state.t_select)\r\n                        console.log(\"Source: \" + source_copy[0])\r\n                    } else {\r\n                        console.log(\"already occupied\")\r\n                        //se não for a mesma casa\r\n                        if (!(this.state.t_select.includes(id))){\r\n                            t_select_copy = [id]\r\n                            source_copy = [id]\r\n                            this.setState({\r\n                                t_select: [...t_select_copy],\r\n                                source: [...source_copy]\r\n                            })\r\n                            console.log(\"selecting other\")\r\n                            console.log(\"Source: \" + source_copy[0])\r\n                            //se for uma casa vazia\r\n                        } \r\n                    }\r\n                }\r\n            //se a peça estiver selecionada\r\n            }else {\r\n                //checar se a casa está ocupada\r\n                if (occupied !== 0){\r\n                    //se for da mesma cor\r\n                    if (occupied === parseInt(player)){\r\n                        console.log(\"Movement not allowed - occupied by: \" + occupied)\r\n                        //se for a mesma peça:\r\n                        if(this.state.t_select[0] === id){\r\n                            console.log(\"de-select\")\r\n                            t_select_copy = []\r\n                            this.setState({\r\n                                t_select: t_select_copy\r\n                            })\r\n                        }\r\n                        //se for outra peça:\r\n                        else {\r\n                            console.log(\"outra peça\")\r\n                            t_select_copy = [id]\r\n                            source_copy = [id]\r\n                            this.setState({\r\n                                t_select: [...t_select_copy],\r\n                                source: [...source_copy]\r\n                            })\r\n                        }\r\n                    //peça é de outra cor  \r\n                    } else {\r\n                        //checar se o movimento é permitido\r\n                        target_copy = [id]\r\n                        this.setState({\r\n                            \r\n                            target: [...source_copy]\r\n                        })\r\n                        console.log(\"selecting target\")\r\n                        console.log(\"Target: \" + target_copy[0])\r\n                    }\r\n                } else {\r\n\r\n                    //checar se o movimento é permitido\r\n\r\n                    \r\n                    //status copies\r\n                    let r1_copy = [...this.state.status[\"r1\"]]\r\n                    let rm_copy = [...this.state.status[\"rm\"]]\r\n                    let r2_copy = [...this.state.status[\"r2\"]]\r\n                    let status_copy = {\"r1\": r1_copy, \"rm\": rm_copy, \"r2\": r2_copy}\r\n                    // house copies\r\n                    let yhouse_copy = [...this.state.yhouse]\r\n                    let ghouse_copy = [...this.state.ghouse]\r\n                    const src_row = this.state.source[0].substr(0, 2)\r\n                    const src_num = this.state.source[0].substr(2)\r\n                    //atualiza status\r\n                    if (!((player === \"1\" && row === \"r2\")||(player === \"2\" && row === \"r1\"))){\r\n                        if (row === \"r1\"){\r\n                            \r\n                            r1_copy[hnumber] = parseInt(player)\r\n                            \r\n                        } else if (row === \"rm\"){\r\n                            \r\n                            rm_copy[hnumber] = parseInt(player)\r\n                            \r\n                        } else if (row === \"r2\") {\r\n                            \r\n                            r2_copy[hnumber] = parseInt(player)\r\n                            \r\n                        }\r\n                        //apaga peça do tabuleiro\r\n                        \r\n                        if (src_row === \"r1\"){\r\n                            \r\n                            r1_copy[src_num] = 0\r\n                            \r\n                        } else if (src_row === \"rm\"){\r\n                            \r\n                            rm_copy[src_num] = 0\r\n                            \r\n                        } else if(src_row === \"r2\") {\r\n                            \r\n                            r2_copy[src_num] = 0\r\n                            \r\n                        } else if (src_row === \"yh\"){\r\n                            yhouse_copy = [...yhouse]\r\n                            yhouse_copy = [...yhouse_copy.slice(1, yhouse_copy.length)]\r\n                            console.log(yhouse_copy)\r\n                        }  else if (src_row === \"gh\"){\r\n                            ghouse_copy = [...ghouse]\r\n                            ghouse_copy = [...ghouse_copy.slice(1, ghouse_copy.length)]\r\n                            console.log(ghouse_copy)\r\n                        }\r\n                    //apaga peça da house\r\n                    //yhouse_copy ou ghouse_copy\r\n                    }\r\n\r\n                    status_copy = {\"r1\": r1_copy, \"rm\": rm_copy, \"r2\": r2_copy}\r\n                    t_select_copy = []\r\n                    console.log(this.state.source)\r\n                    console.log(status_copy, this.state.status)\r\n                    this.setState({\r\n                        status: status_copy,\r\n                        t_select: t_select_copy,\r\n                        yhouse: yhouse_copy,\r\n                        ghouse: ghouse_copy,\r\n                    })\r\n                    console.log(status_copy, this.state.status)   \r\n                }\r\n            }\r\n            \r\n             \r\n        //turn 2\r\n        } else {\r\n            console.log(\"turn 2\")\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    countPieces = (player) => {\r\n        let a = this.count(this.state.status.r1, player); \r\n        let b = this.count(this.state.status.rm, player);\r\n        let c = this.count(this.state.status.r2, player);\r\n        return (a + b + c) \r\n\r\n    }\r\n    tSelect = (id) => {\r\n        let t_select_copy = [...this.state.t_select]\r\n        let target_copy = []\r\n        let source_copy = []\r\n        if (this.state.t_select.length === 0) {\r\n            t_select_copy.push(id)\r\n            source_copy.push(id)\r\n            this.setState({\r\n            t_select: [...t_select_copy],\r\n            source: [...source_copy]        \r\n            })\r\n            console.log(\"adding\")\r\n            console.log(\"Source: \" + source_copy[0])\r\n        } else {\r\n            if (!(this.state.t_select.includes(id))){\r\n                t_select_copy = [id]\r\n                source_copy = [id]\r\n                this.setState({\r\n                    t_select: [...t_select_copy],\r\n                    source: [...source_copy]\r\n                })\r\n                console.log(\"selecting other\")\r\n                console.log(\"Source: \" + source_copy[0])\r\n            }\r\n            else {\r\n                t_select_copy = []\r\n                this.setState({\r\n                    t_select: []\r\n                })\r\n                console.log(\"cancelling\")\r\n            }\r\n\r\n\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    renderRow(num){\r\n        const rlist = [\"r1\", \"rm\", \"r2\"]\r\n        const tomap = this.rtypes[num]\r\n        \r\n        return (tomap[0].map( (value, index) => \r\n            {   \r\n                \r\n                return (\r\n                <Square key= {rlist[num] + index}\r\n                        id = {rlist[num] + index}\r\n                        className=\"square\"\r\n                        row = {rlist[num]}\r\n                        numero = {index} \r\n                        hnum={this.hnumlist[num][0][index]} \r\n                        occupied={this.state.status[rlist[num]][index]}\r\n                        content = {value + \" \" + this.hnumlist[num][0][index] }\r\n                        tSelect = {this.movePiece}\r\n                        t_select = {this.state.t_select}    \r\n                        >\r\n                    \r\n                </Square>\r\n            )}\r\n            ))\r\n\r\n    }\r\n\r\n    rollDice = () => {\r\n        this.setState({\r\n            rolled: this.state.rolled + 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game_area\">\r\n                \r\n                <div className=\"board\">\r\n                    <HoldArea   className=\"hold_area\" \r\n                                children={this.renderHold(\"yh\")}\r\n                                movePiece = {this.movePiece}\r\n                                id={\"yh0\"}\r\n                                occupied = {this.state.yhouse.length === 0? 0:1}></HoldArea>\r\n                \r\n                    <div className=\"R1\">{this.renderRow(0)}</div>\r\n                    <div className=\"RM\">{this.renderRow(1)}</div>\r\n                    <div className=\"R2\">{this.renderRow(2)}</div>\r\n                    <button onClick={this.rollDice.bind(this)}>Roll</button>\r\n                    <HoldArea   className=\"hold_area\" \r\n                                children={this.renderHold(\"gh\")}\r\n                                movePiece = {this.movePiece}\r\n                                id={\"gh0\"}\r\n                                occupied = {this.state.yhouse.length === 0? 0:2}></HoldArea>\r\n                </div>\r\n                <div className=\"safe_area_holder\">\r\n                    <SafeArea className=\"safe_area\" children={this.renderSafe(\"ys\")}></SafeArea>\r\n                    <SafeArea className=\"safe_area\" children={this.renderSafe(\"gs\")}></SafeArea>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    //tools\r\n    arrayRemove = (arr, value) => { return arr.filter(function(ele){ return ele !== value; });}\r\n\r\n    locUpdate = (dowhat) => {\r\n        if (this.state.t_select.length !== 0){\r\n            let row = this.state.t_select[0].substr(0, 2)\r\n            let hnumber = this.state.t_select[0].substr(2)\r\n            let status_copy = this.state.status\r\n            status_copy[row][hnumber] = dowhat\r\n         }\r\n    }\r\n\r\n    count = (array, num) => {\r\n        var counts = {}\r\n        for (let i = 0; i < array.length; i++) {\r\n          let num = array[i];\r\n          counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n        }\r\n          return counts[num] > 0? counts[num]:0\r\n      \r\n      }\r\n}\r\n\r\nexport default Board\r\n","import React, { Component } from 'react'\nimport Board from './components/Board'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Board />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}